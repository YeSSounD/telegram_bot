from config import BOT_TOKEN, ADMIN_IDS


from telegram import Update, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    Application
)
from telegram.constants import ParseMode
from utils.keyboards import get_gender_keyboard, get_yes_no_keyboard 
# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
AGE, GENDER, Q1, Q2 = range(4)  # –î–æ–±–∞–≤–∏–ª–∏ Q1 –∏ Q2

# –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª—è–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /survey –¥–ª—è –æ–ø—Ä–æ—Å–∞")

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
    await update.message.reply_text(
        "üìù –û–ø—Ä–æ—Å –Ω–∞—á–∞–ª—Å—è!\n\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (12-100):"
    )
    return AGE

async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        if not 12 <= age <= 100:
            raise ValueError
            
        context.user_data['age'] = age
        await update.message.reply_text(
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_gender_keyboard()
        )
        return GENDER
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (12-100)")
        return AGE


async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
        return ConversationHandler.END
    
    context.user_data['gender'] = "–ú—É–∂—Å–∫–æ–π" if query.data == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    await query.edit_message_text(
        "‚ùÑÔ∏è –í–æ–ø—Ä–æ—Å 1/2:\n"
        "–ú–æ–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∑–∏–º–æ–π?",
        reply_markup=get_yes_no_keyboard()
    )
    return Q1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


async def handle_question1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await query.edit_message_text(
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_gender_keyboard()
        )
        return GENDER
    
    context.user_data['q1'] = query.data == "yes"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç (True/False)
    
    await query.edit_message_text(
        "üå¨Ô∏è –í–æ–ø—Ä–æ—Å 2/2:\n"
        "–í –∫–∞–±–∏–Ω–µ—Ç–µ –¥—É—à–Ω–æ, –ø–æ—è–≤–∏—Ç—Å—è –ª–∏ —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä?",
        reply_markup=get_yes_no_keyboard()
    )
    return Q2

async def handle_question2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        await query.edit_message_text(
            "‚ùÑÔ∏è –í–æ–ø—Ä–æ—Å 1/2:\n–ú–æ–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∑–∏–º–æ–π?",
            reply_markup=get_yes_no_keyboard()
        )
        return Q1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    context.user_data['q2'] = query.data == "yes"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.edit_message_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        reply_markup=None
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    answers = {
        'yes': '‚úÖ –î–∞',
        'no': '‚ùå –ù–µ—Ç'
    }
    
    admin_message = (
        "üìä <b>–ù–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username or '–±–µ–∑ username'}\n"
        f"üÜî ID: {query.from_user.id}\n\n"
        f"‚ñ™Ô∏è –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"‚ñ™Ô∏è –ü–æ–ª: {context.user_data['gender']}\n"
        f"‚ñ™Ô∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∑–∏–º–æ–π: {answers['yes' if context.user_data['q1'] else 'no']}\n"
        f"‚ñ™Ô∏è –°–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö: {answers['yes' if context.user_data['q2'] else 'no']}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    for admin_id in Config.ADMIN_IDS:
        await context.bot.send_message(
            chat_id=admin_id,
            text=admin_message,
            parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in Config.ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    return ConversationHandler.END


# –ó–∞—Ç–µ–º –æ–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é setup
def setup_user_handlers(application: Application):
    application.add_handler(CommandHandler("start", start))
    
    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler('survey', start_survey)],
            states={
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age)],
                GENDER: [CallbackQueryHandler(handle_gender)],
                Q1: [CallbackQueryHandler(handle_question1)],
                Q2: [CallbackQueryHandler(handle_question2)]
            },
            fallbacks=[],
            per_message=False
        )
    )